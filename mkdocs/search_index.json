{
    "docs": [
        {
            "location": "/", 
            "text": "BayesianDataFusion.jl package\n\n\nThis gives reference and examples for \nBayesianDataFusion.jl\n.\n\n\nFeatures\n\n\nBayesianDataFusion.jl\n provides parallel and highly optimized implementation for\n\n\n\n\nBayesian Probabilistic Matrix Factorization (BPMF)\n\n\nBayesian Probabilistic Tensor Factorization (BPTF)\n\n\nMacau - Bayesian Multi-relational Factorization with Side Information\n\n\n\n\nThese methods allow to predict \nunobserved values\n in the matrices (or tensors). Since they are all Bayesian methods we can also measure the \nuncertainty\n of the predictions. BPMF and BPTF are special cases of Macau. Macau adds\n\n\n\n\nuse of \nentity side information\n to improve factorization (e.g, user and/or movie features for factorizing movie ratings)\n\n\nuse of \nrelation side information\n to improve factorization  (e.g., data about when user went to see particular movie)\n\n\nfactorization of \nseveral\n matrices (and tensors) for an entity simultaneously.\n\n\n\n\nInstallation\n\n\nInside Julia:\n\n\nPkg.clone(\nhttps://github.com/jaak-s/BayesianDataFusion.jl.git\n)\n\n\n\n\nExamples\n\n\nNext we give simple examples of using \nMacau\n for movie ratings prediction from MovieLens data, which is included in the BayesianDataFusion package.\n\n\nMovieLens\n\n\nWe will use \nmacau\n function to factorization (incompletely observed) matrix of movie ratings with \nside information\n for both users and movies. To run the example first install Julia library for reading matlab files\n\n\nPkg.add(\nMAT\n)\n\n\n\n\nExample code\n\n\nusing BayesianDataFusion\nusing MAT\n## load and setup data\npkgdir = Pkg.dir(\nBayesianDataFusion\n)\ndata   = matread(\n$pkgdir/data/movielens_1m.mat\n)\n\n## setup entities, assigning features through (optional) argument F\nusers  = Entity(\nusers\n,  F=data[\nFu\n]);\nmovies = Entity(\nmovies\n, F=data[\nFv\n]);\n\n## setup the relation between users and movies, data from sparse matrix data[\nX\n]\n## first element in '[users, movies]' corresponds to rows and second to columns of data[\nX\n]\nratings = Relation(data[\nX\n], \nratings\n, [users, movies], class_cut = 2.5);\n\n## assign 500,000 of the observed ratings randomly to the test set\nassignToTest!(ratings, 500_000)\n\n## precision of the ratings to 1.5 (i.e., variance of 1/1.5)\nsetPrecision!(ratings, 1.5)\n\n## the model (with only one relation)\nRD = RelationData(ratings)\n\n## run Gibbs sampler of Macau with 10 latent dimensions, total of 400 burnin and 200 posterior samples\nresult = macau(RD, burnin=400, psamples=200, clamp=[1.0, 5.0], num_latent=10)\n\n\n\n\nThis model has only a single relation \nratings\n between entities \nusers\n and \nmovies\n.\nWe use precision 1.5, which is known to be a good estimate of movie rating noise.\nThe optional parameter \nclamp=[1.0, 5.0]\n to \nmacau\n thresholds the predictions to be between 1.0 and 5.0.\nTo build a model with larger latent dimension use, for example, \nnum_latent=30\n.\n\n\nMacau output shows the progress of the Gibbs sampler:\n\n\n  1: Acc=0.836 ROC=0.500 RMSE=1.118 | use[U:  3.1 \u03b2:0.04 \u03bb=21.] mov[U:  3.1 \u03b2:0.07 \u03bb=10.] | rati[\u03b1=1.5] [4s]\n  2: Acc=0.836 ROC=0.500 RMSE=1.118 | use[U:  4.4 \u03b2:0.03 \u03bb=60.] mov[U:  4.4 \u03b2:0.04 \u03bb=38.] | rati[\u03b1=1.5] [0s]\n...\n 80: Acc=0.864 ROC=0.829 RMSE=0.889 | use[U: 72.7 \u03b2:1.34 \u03bb=4.5] mov[U:122.6 \u03b2:3.25 \u03bb=3.1] | rati[\u03b1=1.5] [0s]\n 81: Acc=0.864 ROC=0.829 RMSE=0.888 | use[U: 73.0 \u03b2:1.39 \u03bb=5.3] mov[U:123.0 \u03b2:3.32 \u03bb=3.2] | rati[\u03b1=1.5] [0s]\n...\n\n\n\n\nThe Acc/ROC/RMSE are computed on the test ratings. Note the optional argument \nclass_cut = 2.5\n, used for creating a \nRelation\n, defines the class boundary for computing accuracy (Acc) and AUC-ROC (ROC) values. \n\n\nMovieLens w/o side-information\n\n\nThe above example used user and move features. You can easily factorize the ratings without them, which would correspond to classic \nBPMF\n method. Here is an example code\n\n\nusing BayesianDataFusion\nusing MAT\n## load and setup data\npkgdir = Pkg.dir(\nBayesianDataFusion\n)\ndata   = matread(\n$pkgdir/data/movielens_1m.mat\n)\n\n## setup entities, no features (F):\nusers  = Entity(\nusers\n);\nmovies = Entity(\nmovies\n);\n\n## setup the relation between users and movies, data from sparse matrix data[\nX\n]\n## first element in '[users, movies]' corresponds to rows and second to columns of data[\nX\n]\nratings = Relation(data[\nX\n], \nratings\n, [users, movies], class_cut = 2.5);\n\n## assign 500,000 of the observed ratings randomly to the test set\nassignToTest!(ratings, 500_000)\n\n## precision of the ratings to 1.5 (i.e., variance of 1/1.5)\nsetPrecision!(ratings, 1.5)\n\n## the model (with only one relation)\nRD = RelationData(ratings)\n\n## run Gibbs sampler of Macau with 10 latent dimensions, total of 400 burnin and 200 posterior samples\nresult = macau(RD, burnin=400, psamples=200, clamp=[1.0, 5.0], num_latent=10)\n\n\n\n\nIn most applications the performance of pure BPMF is weaker compared to Macau. This is also true in the case of MovieLens dataset.", 
            "title": "Home"
        }, 
        {
            "location": "/#bayesiandatafusionjl-package", 
            "text": "This gives reference and examples for  BayesianDataFusion.jl .", 
            "title": "BayesianDataFusion.jl package"
        }, 
        {
            "location": "/#features", 
            "text": "BayesianDataFusion.jl  provides parallel and highly optimized implementation for   Bayesian Probabilistic Matrix Factorization (BPMF)  Bayesian Probabilistic Tensor Factorization (BPTF)  Macau - Bayesian Multi-relational Factorization with Side Information   These methods allow to predict  unobserved values  in the matrices (or tensors). Since they are all Bayesian methods we can also measure the  uncertainty  of the predictions. BPMF and BPTF are special cases of Macau. Macau adds   use of  entity side information  to improve factorization (e.g, user and/or movie features for factorizing movie ratings)  use of  relation side information  to improve factorization  (e.g., data about when user went to see particular movie)  factorization of  several  matrices (and tensors) for an entity simultaneously.", 
            "title": "Features"
        }, 
        {
            "location": "/#installation", 
            "text": "Inside Julia:  Pkg.clone( https://github.com/jaak-s/BayesianDataFusion.jl.git )", 
            "title": "Installation"
        }, 
        {
            "location": "/#examples", 
            "text": "Next we give simple examples of using  Macau  for movie ratings prediction from MovieLens data, which is included in the BayesianDataFusion package.", 
            "title": "Examples"
        }, 
        {
            "location": "/#movielens", 
            "text": "We will use  macau  function to factorization (incompletely observed) matrix of movie ratings with  side information  for both users and movies. To run the example first install Julia library for reading matlab files  Pkg.add( MAT )  Example code  using BayesianDataFusion\nusing MAT\n## load and setup data\npkgdir = Pkg.dir( BayesianDataFusion )\ndata   = matread( $pkgdir/data/movielens_1m.mat )\n\n## setup entities, assigning features through (optional) argument F\nusers  = Entity( users ,  F=data[ Fu ]);\nmovies = Entity( movies , F=data[ Fv ]);\n\n## setup the relation between users and movies, data from sparse matrix data[ X ]\n## first element in '[users, movies]' corresponds to rows and second to columns of data[ X ]\nratings = Relation(data[ X ],  ratings , [users, movies], class_cut = 2.5);\n\n## assign 500,000 of the observed ratings randomly to the test set\nassignToTest!(ratings, 500_000)\n\n## precision of the ratings to 1.5 (i.e., variance of 1/1.5)\nsetPrecision!(ratings, 1.5)\n\n## the model (with only one relation)\nRD = RelationData(ratings)\n\n## run Gibbs sampler of Macau with 10 latent dimensions, total of 400 burnin and 200 posterior samples\nresult = macau(RD, burnin=400, psamples=200, clamp=[1.0, 5.0], num_latent=10)  This model has only a single relation  ratings  between entities  users  and  movies .\nWe use precision 1.5, which is known to be a good estimate of movie rating noise.\nThe optional parameter  clamp=[1.0, 5.0]  to  macau  thresholds the predictions to be between 1.0 and 5.0.\nTo build a model with larger latent dimension use, for example,  num_latent=30 .  Macau output shows the progress of the Gibbs sampler:    1: Acc=0.836 ROC=0.500 RMSE=1.118 | use[U:  3.1 \u03b2:0.04 \u03bb=21.] mov[U:  3.1 \u03b2:0.07 \u03bb=10.] | rati[\u03b1=1.5] [4s]\n  2: Acc=0.836 ROC=0.500 RMSE=1.118 | use[U:  4.4 \u03b2:0.03 \u03bb=60.] mov[U:  4.4 \u03b2:0.04 \u03bb=38.] | rati[\u03b1=1.5] [0s]\n...\n 80: Acc=0.864 ROC=0.829 RMSE=0.889 | use[U: 72.7 \u03b2:1.34 \u03bb=4.5] mov[U:122.6 \u03b2:3.25 \u03bb=3.1] | rati[\u03b1=1.5] [0s]\n 81: Acc=0.864 ROC=0.829 RMSE=0.888 | use[U: 73.0 \u03b2:1.39 \u03bb=5.3] mov[U:123.0 \u03b2:3.32 \u03bb=3.2] | rati[\u03b1=1.5] [0s]\n...  The Acc/ROC/RMSE are computed on the test ratings. Note the optional argument  class_cut = 2.5 , used for creating a  Relation , defines the class boundary for computing accuracy (Acc) and AUC-ROC (ROC) values.", 
            "title": "MovieLens"
        }, 
        {
            "location": "/#movielens-wo-side-information", 
            "text": "The above example used user and move features. You can easily factorize the ratings without them, which would correspond to classic  BPMF  method. Here is an example code  using BayesianDataFusion\nusing MAT\n## load and setup data\npkgdir = Pkg.dir( BayesianDataFusion )\ndata   = matread( $pkgdir/data/movielens_1m.mat )\n\n## setup entities, no features (F):\nusers  = Entity( users );\nmovies = Entity( movies );\n\n## setup the relation between users and movies, data from sparse matrix data[ X ]\n## first element in '[users, movies]' corresponds to rows and second to columns of data[ X ]\nratings = Relation(data[ X ],  ratings , [users, movies], class_cut = 2.5);\n\n## assign 500,000 of the observed ratings randomly to the test set\nassignToTest!(ratings, 500_000)\n\n## precision of the ratings to 1.5 (i.e., variance of 1/1.5)\nsetPrecision!(ratings, 1.5)\n\n## the model (with only one relation)\nRD = RelationData(ratings)\n\n## run Gibbs sampler of Macau with 10 latent dimensions, total of 400 burnin and 200 posterior samples\nresult = macau(RD, burnin=400, psamples=200, clamp=[1.0, 5.0], num_latent=10)  In most applications the performance of pure BPMF is weaker compared to Macau. This is also true in the case of MovieLens dataset.", 
            "title": "MovieLens w/o side-information"
        }
    ]
}