{
    "docs": [
        {
            "location": "/", 
            "text": "BayesianDataFusion.jl package\n\n\nThis gives reference and examples for \nBayesianDataFusion.jl\n.\n\n\nFeatures\n\n\nBayesianDataFusion.jl\n provides parallel and highly optimized implementation for\n\n\n\n\nBayesian Probabilistic Matrix Factorization (BPMF)\n\n\nBayesian Probabilistic Tensor Factorization (BPTF)\n\n\nMacau - Bayesian Multi-relational Factorization with Side Information\n\n\n\n\nThese methods allow to predict \nunobserved values\n in the matrices (or tensors). Since they are all Bayesian methods we can also measure the \nuncertainty\n of the predictions. BPMF and BPTF are special cases of Macau. Macau adds\n\n\n\n\nuse of entity \nside information\n to improve factorization (e.g, user and/or movie features for factorizing movie ratings)\n\n\nuse of relation \nside information\n to improve factorization  (e.g., data about when user went to see particular movie)\n\n\nfactorization of several matrices (and tensors) simultaneously.\n\n\n\n\nInstallation\n\n\nInside Julia:\n\n\nPkg.clone(\nhttps://github.com/jaak-s/BayesianDataFusion.jl.git\n)\n\n\n\n\nExamples\n\n\nNext we give simple examples of using \nMacau\n for movie ratings prediction from MovieLens data, which is included in the BayesianDataFusion package.\n\n\nMovieLens\n\n\nFactorization of (incompletely observed) matrix of movie ratings with side information for both users and movies:\n\n\nusing BayesianDataFusion\nusing MAT\npkgdir = Pkg.dir(\nBayesianDataFusion\n)\ndata   = matread(\n$pkgdir/data/movielens_1m.mat\n)\n\n## factorize ratings X with user features from Fu and movie features from Fv\nRD = RelationData(data[\nX\n], feat1=data[\nFu\n], feat2=data[\nFv\n])\n\n## assign 500,000 of the observed values randomly to the test set\nassignToTest!(RD.relations[1], 500_000)\n\n## precision (inverse of variance) of the observations to 1.5.\nsetPrecision!(RD.relations[1], 1.5)\n\n## view the model\nRD\n\n## run Gibbs sampler of Macau with 10 latent dimensions, total of 400 burnin and 200 posterior samples\nresult = macau(RD, burnin=400, psamples=200, clamp=[1.0, 5.0], num_latent=10)\n\n\n\n\nThis model has only a single relation, accessed by \nRD.relations[1]\n. We use precision 1.5, which is known to be a good estimate of movie rating noise. The optional parameter \nclamp=[1.0, 5.0]\n thresholds the predictions to be between 1.0 and 5.0.", 
            "title": "Home"
        }, 
        {
            "location": "/#bayesiandatafusionjl-package", 
            "text": "This gives reference and examples for  BayesianDataFusion.jl .", 
            "title": "BayesianDataFusion.jl package"
        }, 
        {
            "location": "/#features", 
            "text": "BayesianDataFusion.jl  provides parallel and highly optimized implementation for   Bayesian Probabilistic Matrix Factorization (BPMF)  Bayesian Probabilistic Tensor Factorization (BPTF)  Macau - Bayesian Multi-relational Factorization with Side Information   These methods allow to predict  unobserved values  in the matrices (or tensors). Since they are all Bayesian methods we can also measure the  uncertainty  of the predictions. BPMF and BPTF are special cases of Macau. Macau adds   use of entity  side information  to improve factorization (e.g, user and/or movie features for factorizing movie ratings)  use of relation  side information  to improve factorization  (e.g., data about when user went to see particular movie)  factorization of several matrices (and tensors) simultaneously.", 
            "title": "Features"
        }, 
        {
            "location": "/#installation", 
            "text": "Inside Julia:  Pkg.clone( https://github.com/jaak-s/BayesianDataFusion.jl.git )", 
            "title": "Installation"
        }, 
        {
            "location": "/#examples", 
            "text": "Next we give simple examples of using  Macau  for movie ratings prediction from MovieLens data, which is included in the BayesianDataFusion package.  MovieLens  Factorization of (incompletely observed) matrix of movie ratings with side information for both users and movies:  using BayesianDataFusion\nusing MAT\npkgdir = Pkg.dir( BayesianDataFusion )\ndata   = matread( $pkgdir/data/movielens_1m.mat )\n\n## factorize ratings X with user features from Fu and movie features from Fv\nRD = RelationData(data[ X ], feat1=data[ Fu ], feat2=data[ Fv ])\n\n## assign 500,000 of the observed values randomly to the test set\nassignToTest!(RD.relations[1], 500_000)\n\n## precision (inverse of variance) of the observations to 1.5.\nsetPrecision!(RD.relations[1], 1.5)\n\n## view the model\nRD\n\n## run Gibbs sampler of Macau with 10 latent dimensions, total of 400 burnin and 200 posterior samples\nresult = macau(RD, burnin=400, psamples=200, clamp=[1.0, 5.0], num_latent=10)  This model has only a single relation, accessed by  RD.relations[1] . We use precision 1.5, which is known to be a good estimate of movie rating noise. The optional parameter  clamp=[1.0, 5.0]  thresholds the predictions to be between 1.0 and 5.0.", 
            "title": "Examples"
        }
    ]
}